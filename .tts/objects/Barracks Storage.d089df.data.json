{
  "GUID": "d089df",
  "Name": "Custom_Model_Bag",
  "Transform": {
    "posX": -8.428711,
    "posY": 1.50608337,
    "posZ": 43.54548,
    "rotX": 0.0168940853,
    "rotY": 180.006714,
    "rotZ": 0.07990155,
    "scaleX": 2.199999,
    "scaleY": 2.199999,
    "scaleZ": 2.199999
  },
  "Nickname": "Barracks Storage",
  "Description": "Storage Expedition Barracks items in here for quick storage. The game moderator should save this object between games.",
  "GMNotes": "",
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "ColorDiffuse": {
    "r": 1,
    "g": 1,
    "b": 1
  },
  "LayoutGroupSortIndex": 0,
  "Value": 0,
  "Locked": true,
  "Grid": true,
  "Snap": true,
  "IgnoreFoW": false,
  "MeasureMovement": false,
  "DragSelectable": true,
  "Autoraise": true,
  "Sticky": true,
  "Tooltip": true,
  "GridProjection": false,
  "HideWhenFaceDown": false,
  "Hands": false,
  "MaterialIndex": -1,
  "MeshIndex": -1,
  "Number": 0,
  "CustomMesh": {
    "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/2064382397819467674/F3FB68D9163A73D4CE53FCF8190891E17CEA7782/",
    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/2064382397819290039/93150C090E65B2241B69A341C2A865A2C48D2AA1/",
    "NormalURL": "https://steamusercontent-a.akamaihd.net/ugc/2064382397819365480/F87D8C6C9A1EE83B41A54441D08C16259E8366D0/",
    "ColliderURL": "https://steamusercontent-a.akamaihd.net/ugc/2064382397819467674/F3FB68D9163A73D4CE53FCF8190891E17CEA7782/",
    "Convex": true,
    "MaterialIndex": 3,
    "TypeIndex": 6,
    "CustomShader": {
      "SpecularColor": {
        "r": 1,
        "g": 1,
        "b": 1
      },
      "SpecularIntensity": 0,
      "SpecularSharpness": 2,
      "FresnelStrength": 0
    },
    "CastShadows": true
  },
  "Bag": {
    "Order": 0
  },
  "LuaScript": "bagGUID = \"\"\r\nfunction onLoad()\r\n  bagGUID = self.getGUID()\r\n  setupShop_params = {\r\n    click_function = \"setupShop\",\r\n    function_owner = self,\r\n    label = \"Setup Market\",\r\n    tooltip = \"Auto-sets Market. >9 cards? Even 3-type split. Extra cards become deck in Barracks Storage.\",\r\n    position = {0, 0,1.3},\r\n    rotation = {0,0,0},\r\n    width = 1000,\r\n    height = 400,\r\n    color = {1,1,1},\r\n    font_color = {0,0,0},\r\n    font_size = 150\r\n  }\r\n  self.createButton(setupShop_params)\r\n\r\nend\r\n\r\nfunction setupShop(params)\r\n    local bag = getObjectFromGUID(bagGUID)\r\n    local cardDatas = bag.getObjects() -- 获取卡牌数据表列表\r\n    local shopSlots = {}\r\n    local bagPosition = bag.getPosition()\r\n\r\n    -- 阶段1：数据采集 ----------------------------------------------\r\n    for _, data in ipairs(cardDatas) do\r\n        local desc = data.description\r\n        if desc and data.gm_notes == \"Market Randomiser\" then\r\n            local cardType, value = desc:match(\"(%a+)(%d+)\")\r\n            if cardType and value then\r\n                -- 关键修改：使用takeObject取出卡牌获取真实对象\r\n                local cardObj = bag.takeObject({\r\n                    guid = data.guid,\r\n                    position = bagPosition + vector(0, 5, 0), -- 临时放置位置\r\n                    smooth = false\r\n                })\r\n                -- print(\"取出卡牌:\", cardObj.getGUID())\r\n                table.insert(shopSlots, {\r\n                    obj = cardObj,\r\n                    type = cardType:lower(),\r\n                    value = tonumber(value)\r\n                })\r\n            end\r\n        end\r\n    end\r\n\r\n    -- 调试：打印原始数据\r\n    -- print(\"\\n==== 阶段1：数据采集 ====\")\r\n    -- print(\"袋中卡牌总数:\", #cardDatas)\r\n    -- print(\"有效解析卡牌数:\", #shopSlots)\r\n\r\n    -- 阶段2：智能排序 ----------------------------------------------\r\n    table.sort(shopSlots, function(a,b)\r\n        local typeOrder = {gem=1, relic=2, spell=3}\r\n        -- 优先按类型排序\r\n        if a.type ~= b.type then\r\n            return typeOrder[a.type] < typeOrder[b.type]\r\n        end\r\n        -- 同类型按数值升序\r\n        return a.value < b.value\r\n    end)\r\n\r\n    -- 阶段3：智能筛选 ----------------------------------------------\r\n    local finalSelection = {}\r\n    local typeCounts = {gem=0, relic=0, spell=0}\r\n    local remaining = 9\r\n\r\n    -- 调试头\r\n    -- print(\"\\n==== 阶段3：筛选过程 ====\")\r\n\r\n    -- 情况1：刚好9张直接使用\r\n    if #shopSlots == 9 then\r\n        -- print(\"检测到正好9张卡牌，直接使用全部\")\r\n        finalSelection = shopSlots\r\n    else\r\n        -- print(\"开始智能筛选...\")\r\n        -- 情况2：需要筛选时\r\n        for i, card in ipairs(shopSlots) do\r\n            local canSelect = false\r\n            -- local reason = \"\"\r\n\r\n            -- 核心筛选条件\r\n            if remaining > 0 then\r\n                -- 条件A：该类型未达配额（3张）\r\n                if typeCounts[card.type] < 3 then\r\n                    canSelect = true\r\n                    -- reason = \"类型配额未满\"\r\n                -- 条件B：所有类型都达配额但仍有剩余位置\r\n                elseif typeCounts.gem >=3 and typeCounts.relic >=3 and typeCounts.spell >=3 then\r\n                    canSelect = true\r\n                    -- reason = \"强制填充剩余位置\"\r\n                end\r\n\r\n                if canSelect then\r\n                    table.insert(finalSelection, card)\r\n                    typeCounts[card.type] = typeCounts[card.type] + 1\r\n                    remaining = remaining - 1\r\n                    -- 调试日志\r\n                    -- print(string.format(\"选中 %2d: %s%-2d | 类型计数: G%d R%d S%d | 剩余: %d | 原因: %s\",\r\n                    --     i, card.type:upper(), card.value,\r\n                    --     typeCounts.gem, typeCounts.relic, typeCounts.spell,\r\n                    --     remaining, reason))\r\n                end\r\n            else\r\n                break\r\n            end\r\n        end\r\n    end\r\n\r\n    -- 阶段4：布局与调试 --------------------------------------------\r\n    local positions = {\r\n        {28.93,3,23.46}, {36.07,3,23.46}, {43.27,3,23.46},\r\n        {28.93,3,13.75}, {36.07,3,13.75}, {43.32,3,13.75},\r\n        {28.93,3,3.96},  {36.07,3,3.96},  {43.23,3,3.96}\r\n    }\r\n\r\n    -- print(\"\\n==== 最终结果 ====\")\r\n    -- print(\"目标位置数:\", 9)\r\n    -- print(\"实际选中数:\", #finalSelection)\r\n    -- print(\"各类型分布:\")\r\n    -- print(\"GEM:\", typeCounts.gem, \"RELIC:\", typeCounts.relic, \"SPELL:\", typeCounts.spell)\r\n\r\n    -- 打印每张卡的详细信息\r\n    for i, card in ipairs(finalSelection) do\r\n        local pos = positions[i] or {\"无位置\"}\r\n        -- print(string.format(\"槽位%1d: [%s] %s%-2d → 坐标: %.2f,%.2f,%.2f\",\r\n        --     i, card.obj.getGUID(), card.type:upper(), card.value,\r\n        --     pos[1], pos[2], pos[3]))\r\n    end\r\n\r\n    -- 执行卡牌摆放\r\n    for i, card in ipairs(finalSelection) do\r\n        if positions[i] then\r\n            card.obj.setPosition(positions[i])\r\n        end\r\n    end\r\nend",
  "LuaScriptState": "",
  "XmlUI": ""
}