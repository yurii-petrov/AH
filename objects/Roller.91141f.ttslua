--serpent = require("util/serpent")

local rollerData = {
  type = 1,
  lastType = 1
}

function onLoad()
  self.interactable = true

  --   position = {
  --   x = 3.0608136653900146,
  --   y = 0.20000040531158447,
  --   z = -0.29565337300300598
  -- },

  local sps = self.getSnapPoints()

  for i, sp in pairs(sps) do
    sp.tags = {"Dice"}
    sp.rotation = {0, 180, 0}
    sp.position = sp.position:setAt("y", 0):setAt("z", -0.295)
  end

  self.setSnapPoints(sps)

  --  print(serpent.tts(self.getSnapPoints()))

  --  print(serpent.tts(oData))
  --   local clone = spawnObjectData({
  --     data = oData
  --   })
end

function hoverResultsEnter(_, _, _)
  self.UI.setAttribute("results_default", "active", "false")
  self.UI.setAttribute("results_hover", "active", "true")
end

function hoverResultsExit(_, _, _)
  self.UI.setAttribute("results_default", "active", "true")
  self.UI.setAttribute("results_hover", "active", "false")
end

local numberSet = {}
local rerollId = nil
local isRolling = false
function dice_btn(playerColor, alt_click, id)
  if isRolling then
    return
  end

  local current_number = tonumber(id:match("%d+"))
  local current_color
  if alt_click == "-1" then
    if getSetSize(numberSet) ~= 0 then
      return
    end
    
    rollerData.type = Global.call("getRollerType", playerColor) or 1

    local removeAllDices = false
    if rollerData.type ~= rollerData.lastType then
      removeAllDices = true
      rollerData.lastType = rollerData.type
    end

    isRolling = true
    self.UI.setAttribute("reroll", "text", 0)
    self.UI.setAttribute("reroll", "color", "#a29c90")

    self.UI.setAttribute("rerolled_dices", "text", 0)
    self.UI.setAttribute("rerolled_dices", "color", "#a29c90")
    
    self.UI.setAttribute("success", "text", "?")
    self.UI.setAttribute("success", "color", "#a29c90")

    self.UI.setAttribute("success_additional", "text", "?")
    self.UI.setAttribute("success_additional", "color", "#a29c90")

    -- local sps = self.getSnapPoints()

    -- local objects = upCast(self, 1, nil, 1)
    -- for _, obj in pairs(objects) do
    --   if obj.hasTag("Dice") then
    --     obj.destruct()
    --   else
    --     local p = self.getPosition():setAt("y", 3)
    --     obj.setPosition(p:setAt("z", p.z-self.getBoundsNormalized().size.z))
    --   end
    -- end

    local sps = self.getSnapPoints()
    local countFinishedDice = 0
    local total = 0
    for i = 1, 12 do

      local p = self.positionToWorld(sps[i].position):setAt("y", 2.7)
      local s = 0.2
      local hits = Physics.cast({
        origin = p,
        direction = {0, 1, 0},
        type = 3,
        size = {s, s, s},
        orientation = {0, 0, 0},
        max_distance = 0,
        debug = false
      })

      local obj = nil
      for _, v in pairs(hits) do
        if v.hit_object ~= self and v.hit_object and v.hit_object.guid then
          if v.hit_object.hasTag("Dice") then
            if not obj and not removeAllDices then
              obj = v.hit_object
            else
              v.hit_object.destruct()
            end
          else
            local p = self.getPosition():setAt("y", 3)
            v.hit_object.setPosition(p:setAt("z", p.z - self.getBoundsNormalized().size.z))
          end
        end
      end

      if i > current_number then
        self.UI.setAttribute("dice_" .. i, "text", i)
        self.UI.setAttribute("dice_" .. i, "textColor", "#4d4a44")
        self.UI.setAttribute("icon_dice_" .. i, "active", "false")

        if obj then
          obj.destruct()
        end
      else

        if not obj then
          obj = spawnObjectData({
            data = getDiceData(p:setAt("y", 1 + 0.523))
          })
        end

        obj.interactable = false
        Wait.time(function()
          local pos = obj.getPosition() + Vector(0, 0, 5)
          obj.setPositionSmooth(pos, false, true)
          Wait.time(function()
            obj.setAngularVelocity(Vector(50, 50, 50))
            runAfterRest(obj, function(obj)
              obj.randomize()
              runAfterRest(obj, function(obj)
                for _, rv in pairs(obj.getRotationValues()) do
                  if rv.value == obj.getRotationValue() then

                    if issuccesss(rv.value) then
                      total = total + 1
                      self.UI.setAttribute("success", "text", total)
                      self.UI.setAttribute("success", "color", "#fff5e2")
                    end

                    obj.setRotation(rv.rotation)
                    obj.setPositionSmooth(p:setAt("z", p.z):setAt("y", 2.57), false, true)
                    runAfterRest(obj, function(obj)
                      obj.setRotation(rv.rotation)
                      obj.interactable = true
                      countFinishedDice = countFinishedDice + 1

                      if countFinishedDice == current_number then
                        isRolling = false
                        setSucess(total, playerColor)
                      end
                    end)
                  end
                end
              end)
            end)
          end, 0.3)
        end, 1)

        self.UI.setAttribute("dice_" .. i, "text", i)
        self.UI.setAttribute("dice_" .. i, "textColor", "#fff5e2")
      end
    end
  elseif alt_click == "-2" then
    if rerollId then
      Wait.stop(rerollId)
      rerollId = nil
    end

    if self.UI.getAttribute(id, "textColor") == "#4d4a44" then
      return
    end

    if self.UI.getAttribute("icon_" .. id, "active") == "false" then
      current_color = self.UI.getAttribute(id, "textColor")
      self.UI.setAttribute(id, "text", "")
      self.UI.setAttribute(id, "textColor", current_color)
      self.UI.setAttribute("icon_" .. id, "active", "true")
      numberSet[current_number] = true
    elseif self.UI.getAttribute("icon_" .. id, "active") == "true" then
      current_color = self.UI.getAttribute(id, "textColor")
      self.UI.setAttribute(id, "text", id:match("%d+"))
      self.UI.setAttribute(id, "textColor", current_color)
      self.UI.setAttribute("icon_" .. id, "active", "false")
      numberSet[current_number] = nil
    end

    rerollId = Wait.time(function()
      local nSelected = getSetSize(numberSet)
      if nSelected == 0 then
        isRolling = false
        return
      end

      isRolling = true

      local total = tonumber(self.UI.getAttribute("success", "text"))
      local countFinishedDice = 0
      for i = 1, 12 do

        local color = self.UI.getAttribute("dice_" .. i, "textColor")
        if color ~= "#4d4a44" then
          -- a29c90 -- successs
          -- #fff5e2 - white
          -- 4d4a44 - gray
          if self.UI.getAttribute("icon_dice_" .. i, "active") == "true" then

            local sps = self.getSnapPoints()
            local p = self.positionToWorld(sps[i].position):setAt("y", 2.7)
            local s = 0.5
            local hits = Physics.cast({
              origin = p,
              direction = {0, 1, 0},
              type = 3,
              size = {s, s, s},
              orientation = {0, 0, 0},
              max_distance = 0,
              debug = false
            })

            local obj = nil
            for _, v in pairs(hits) do
              if v.hit_object ~= self and v.hit_object and v.hit_object.guid then
                if v.hit_object.hasTag("Dice") then
                  if issuccesss(v.hit_object.getRotationValue()) then
                    total = total - 1
                    self.UI.setAttribute("success", "text", total)
                    self.UI.setAttribute("success", "color", "#fff5e2")
                  end

                  if not obj then
                    obj = v.hit_object
                  else
                    v.hit_object.destruct()
                  end
                else
                  local p = self.getPosition():setAt("y", 3)
                  v.hit_object.setPosition(p:setAt("z", p.z - self.getBoundsNormalized().size.z))
                end
              end
            end

            if not obj then
              obj = spawnObjectData({
                data = getDiceData(p:setAt("y", 1 + 0.523))
              })
            end

            obj.interactable = false

            Wait.time(function()
            local pos = obj.getPosition() + Vector(0, 0, 5)
            obj.setPositionSmooth(pos, false, true)
              Wait.time(function()
                obj.setAngularVelocity(Vector(50, 50, 50))
              end, 0.3)
              runAfterRest(obj, function(obj)
                obj.randomize()
                runAfterRest(obj, function(obj)
                  for _, rv in pairs(obj.getRotationValues()) do
                    if rv.value == obj.getRotationValue() then

                      if issuccesss(rv.value) then
                        total = total + 1
                        self.UI.setAttribute("success", "text", total)
                        self.UI.setAttribute("success", "color", "#fff5e2")
                      end

                      obj.setRotation(rv.rotation)
                      obj.setPositionSmooth(p:setAt("z", p.z):setAt("y", 2.57), false, true)
                      runAfterRest(obj, function(obj)
                        obj.interactable = true
                        self.UI.setAttribute("icon_dice_" .. i, "active", "false")
                        self.UI.setAttribute("dice_" .. i, "text", i)
                        self.UI.setAttribute("dice_" .. i, "textColor", "#a29c90")
                        countFinishedDice = countFinishedDice + 1

                        if countFinishedDice == nSelected then
                          isRolling = false
                          numberSet = {}
                          setSucess(total, playerColor)
                          local rerollCount = tonumber(self.UI.getAttribute("reroll", "text"))
                          self.UI.setAttribute("reroll", "text", rerollCount + 1)
                          self.UI.setAttribute("reroll", "color", "#fff5e2")
                          local rerolled_dicesCount = tonumber(self.UI.getAttribute("rerolled_dices", "text"))
                          self.UI.setAttribute("rerolled_dices", "text", rerolled_dicesCount + nSelected)
                          self.UI.setAttribute("rerolled_dices", "color", "#fff5e2")
                        end
                      end)
                    end
                  end
                end)
              end)
            end, 1)

          elseif color == "#a29c90" then
            self.UI.setAttribute("dice_" .. i, "textColor", color)
          else
            self.UI.setAttribute("dice_" .. i, "textColor", "#fff5e2")
          end
        end
      end
    end, 1)
  end
end

function setSucess(value, playerColor)
  if value == 0 then
    broadcastToAll(playerColor.steam_name .. " провалив перевірку! ", "Red")
  elseif value == 1 then
    broadcastToAll(playerColor.steam_name .. " має " .. value.." успіх!", "Green")
  elseif value < 5 then
    broadcastToAll(playerColor.steam_name .. " має " .. value.." успіхи!", "Green")
  else
    broadcastToAll(playerColor.steam_name .. " має " .. value.." успіхів!", "Green")
  end
  local success_color = "#a29c90"
  if value > 0 then
    success_color = "#fff5e2"
  end
  self.UI.setAttribute("success", "text", value)
  self.UI.setAttribute("success", "color", success_color)
  self.UI.setAttribute("success_additional", "text", value)
  self.UI.setAttribute("success_additional", "color", success_color)
end

function issuccesss(value)
  local value = tonumber(value)
  return (rollerData.type == 1 and value >= 5) or (rollerData.type == 2 and value >= 4) or (rollerData.type == 3 and value == 6)
end

function getDiceImage()
  if rollerData.type == 1 then
    return "https://drive.google.com/uc?export=view&id=1ei-eki7jgVPGAUOgsbIb-EvYVP1qMM9u"
  elseif rollerData.type == 2 then
    return "https://drive.google.com/uc?export=view&id=1UsEVYLoPfqJNlcdP2uwVmpZ9ALgctO9L"
  elseif rollerData.type == 3 then
    return "https://drive.google.com/uc?export=view&id=1Qh1q7YFQvBvZ1QGBxhsIMIWDsFAHdj1z"
  end
end

local rotationValues = {{
  Rotation = {
    x = -90,
    y = 0,
    z = 0
  },
  Value = "1"
}, {
  Rotation = {
    x = 0,
    y = 0,
    z = 0
  },
  Value = "2"
}, {
  Rotation = {
    x = 0,
    y = 0,
    z = -90
  },
  Value = "3"
}, {
  Rotation = {
    x = 0,
    y = 0,
    z = 90
  },
  Value = "4"
}, {
  Rotation = {
    x = 0,
    y = 0,
    z = -180
  },
  Value = "5"
}, {
  Rotation = {
    x = 90,
    y = 0,
    z = 0
  },
  Value = "6"
}}

function getRandomDiceRotation()
  local index = math.random(1, #rotationValues)
  return rotationValues[index].Rotation
end

function getDiceData(pos)
  local imageURL = getDiceImage()
  if not imageURL then
    return
  end
  local rotation = getRandomDiceRotation()
  return {
    AltLookAngle = {
      x = 0,
      y = 0,
      z = 0
    },
    Autoraise = true,
    ColorDiffuse = {
      a = 1,
      b = 1,
      g = 1,
      r = 1
    },
    CustomImage = {
      CustomDice = {
        Type = 1
      },
      ImageScalar = 1,
      ImageSecondaryURL = "",
      ImageURL = imageURL,
      WidthScale = 0
    },
    Description = "",
    DragSelectable = true,
    GMNotes = "",
    Grid = true,
    GridProjection = false,
    Hands = false,
    HideWhenFaceDown = false,
    IgnoreFoW = false,
    LayoutGroupSortIndex = 0,
    Locked = false,
    LuaScript = "",
    LuaScriptState = "",
    MeasureMovement = false,
    Name = "Custom_Dice",
    Nickname = "",
    RotationValues = rotationValues,
    Snap = true,
    Sticky = true,
    Tags = {"Dice"},
    Tooltip = true,
    Transform = {
      posX = pos.x,
      posY = pos.y,
      posZ = pos.z,
      rotX = rotation.x,
      rotY = rotation.y,
      rotZ = rotation.z,
      scaleX = 1.1000000238418579,
      scaleY = 1.1000000238418579,
      scaleZ = 1.1000000238418579
    },
    Value = 0,
    XmlUI = ""
  }
end

function upCast(obj, dist, offset, multi)
  if obj == nil then
    return
  end
  local dist = dist or 1
  local offset = offset or 0
  local multi = multi or 1
  local oPos = obj.getPosition()
  local oBounds = obj.getBoundsNormalized()
  local oRot = obj.getRotation()
  local orig = {oPos[1], oPos[2] + dist / 2 + oBounds.size.y / 2 + offset, oPos[3]}
  local siz = {oBounds.size.x * multi, dist, oBounds.size.z * multi}
  local orient = {oRot[1], oRot[2], oRot[3]}
  local hits = Physics.cast({
    origin = orig,
    direction = {0, 1, 0},
    type = 3,
    size = siz,
    orientation = orient,
    max_distance = 0,
    debug = false
  })
  local hitObjects = {}
  for i, v in pairs(hits) do
    if v.hit_object ~= obj then
      table.insert(hitObjects, v.hit_object)
    end
  end
  return hitObjects
end

function runAfterRest(o, f, f2, n)
  f = f or function()
  end -- function to run when resting
  f2 = f2 or function()
  end -- function to run when time-out is reached
  n = n or 5 -- time out delay in seconds
  Wait.frames(function()
    Wait.condition(function()
      if o ~= nil then
        f(o)
      end
    end, function()
      if o == nil then
        return true
      else
        return o.resting
      end
    end, n, function()
      if o ~= nil then
        f2(o)
      end
    end)
  end, 1)
end

function getSetSize(set)
  local count = 0
  for _ in pairs(set) do
    count = count + 1
  end
  return count
end

function gPos(s, h)
  if s and h then
    local pos = s.positionToLocal(h.getPosition())
    local formattedPos = {string.format("%.3f", pos[1]), string.format("%.3f", pos[2]), string.format("%.3f", pos[3])}
    local rot = s.positionToLocal(h.getRotation())
    local formattedRot = {string.format("%.3f", rot[1]), string.format("%.3f", rot[2]), string.format("%.3f", rot[3])}
    log("[" .. s.guid .. "] = {\npos=" .. serpent.tts(formattedPos))
  end
end
